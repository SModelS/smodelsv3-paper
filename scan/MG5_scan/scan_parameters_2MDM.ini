[options]
cleanOutput = True
runMadGraph = True
runPythia = False
runDelphes = False
ncpu = 3 
ncore = 10 
[AuxPars]
#zpMasses = $loop{[3200.]}
zpMasses = $loop{numpy.arange(200.0, 4025.0, 25)}
chiMasses = 65
sdMasses = ${zpMasses}/2
energy = $loop{[8000, 13000]}
#massPairs = $loop{[(1, 100), (1, 250), (100, 250), (1, 500), (100, 500), (200, 500), (1, 750), (100, 750), (200, 750), (300, 750), (1, 1000), (100, 1000), (200, 1000), (300, 1000), (400, 1000), (1, 1250), (100, 1250), (200, 1250), (300, 1250), (400, 1250), (500, 1250), (600, 1250), (1, 1500), (100, 1500), (200, 1500), (300, 1500), (400, 1500), (500, 1500), (600, 1500), (700, 1500), (1, 1750), (100, 1750), (200, 1750), (300, 1750), (400, 1750), (500, 1750), (600, 1750), (700, 1750), (800, 1750), (1, 2000), (100, 2000), (200, 2000), (300, 2000), (400, 2000), (500, 2000), (600, 2000), (700, 2000), (800, 2000), (900, 2000), (1, 2250), (100, 2250), (200, 2250), (300, 2250), (400, 2250), (500, 2250), (600, 2250), (700, 2250), (800, 2250), (900, 2250), (1000, 2250), (1100, 2250), (1, 2500), (100, 2500), (200, 2500), (300, 2500), (400, 2500), (500, 2500), (600, 2500), (700, 2500), (800, 2500), (900, 2500), (1000, 2500), (1100, 2500), (1200, 2500), (1, 2750), (100, 2750), (200, 2750), (300, 2750), (400, 2750), (500, 2750), (600, 2750), (700, 2750), (800, 2750), (900, 2750), (1000, 2750), (1100, 2750), (1200, 2750), (1300, 2750), (1, 3000), (100, 3000), (200, 3000), (300, 3000), (400, 3000), (500, 3000), (600, 3000), (700, 3000), (800, 3000), (900, 3000), (1000, 3000), (1100, 3000), (1200, 3000), (1300, 3000), (1400, 3000)]}
#saValues = numpy.random.uniform(0.1, 1.0)
#couplingsPairs = $loop{[(numpy.sqrt(2)/10, 0.04), (numpy.sqrt(2), 0.25), (numpy.sqrt(2), 1.0)]}
#GMratio = 0.5
#gq_with_top = numpy.sqrt((4*numpy.pi*${GMratio} - (1/3)*(1-(4*${massPairs}[0]**2/${massPairs}[1]**2))**(3/2)) / (5 + (1 - (1-(4*172**2/${massPairs}[1]**2))**(3/2))))
#gq_no_top = numpy.sqrt((4*numpy.pi*${GMratio} - (1/3)*(1-(4*${massPairs}[0]**2/${massPairs}[1]**2))**(3/2)) / 5)
#gqValues = ${gq_with_top} if ${massPairs}[1] > 2*172 else ${gq_no_top}

#gqValues = numpy.random.choice([0.1, 0.25, 0.4, 0.6, 0.8, 1.0])
#gchiValues = numpy.random.choice([numpy.sqrt(2), 2*numpy.sqrt(2)])

proc = $loop{['zp_prod', 'sd_prod']}
[MadGraphPars]
#MG5 Cards:
proccard = Cards/${AuxPars:proc}/proc_card.dat # Optional (only used if processFolder does not exist)
paramcard = Cards/zp_prod/param_card.dat # Path to the default parameter_card.dat to be used by MadGraph. Note that the parameter values defined in the MadGraphSet section below will automatically overwrite the values in paramcard. If not defined, the default file for the model will be used.

runcard = Cards/zp_prod/run_card_lhapdf.dat # Path to the default run_card.dat to be used by MadGraph. Note that the parameter values defined in the MadGraphSet section below will automatically overwrite the values in runcard. If not defined, the default file for the model will be used.

delphescard = Cards/delphes_card.dat # If not defined, will not run Delphes
pythia8card = Cards/pythia8_card.dat # If not defined it will not run Pythia and Delphes
processFolder = 2mdm_${AuxPars:proc}_${AuxPars:energy}GeV # Path to the folder to store the process generation output. If it already exists, the process generation will be #List of model parameters. Only values in this section are allowed as lists (for loops)

[MadGraphSet]
nevents = 5000
mzp = ${AuxPars:zpMasses}
#mzp = 2000.0
msd = ${AuxPars:sdMasses}
#msd = 200
mchi = ${AuxPars:chiMasses}
#sa = ${AuxPars:saValues}
sina = 0.25
gq = 0.25
gchi = numpy.sqrt(2)
se = 0.0
xqcut = 0
ebeam1 = ${AuxPars:energy}/2
ebeam2 = ${AuxPars:energy}/2
#gqlabel = ${AuxPars:vals}[2]*10
run_tag = "axial_%1.0f_%1.0f" %(${mzp},${mchi})
#run_tag = "sd_%1.0f_dm_%1.0f_gqv_%1.1f" %(${msd},${mchi},${gqv})
